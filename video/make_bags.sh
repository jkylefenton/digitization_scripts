#!/bin/bash

basepath="${HOME}/Desktop/bags"

cd ${basepath}

echo -n "USERNAME: "; read uname
echo -n "PASSWORD: "; stty -echo; read passwd; stty echo; echo

# remove any pesky files that don't belong in the bags
find ${basepath} -type f -name ".DS_Store" -exec rm {} \;

for folder in `ls ${basepath}`; do
  if [[ -e ${folder}/bagit.txt ]]; then
    echo "Bag already exists, skipping to upload"
  else
    echo "Making bag for ${folder}"
    bagit.py --md5 --sha1 --contact-name=tbunn ${folder}
    echo "${folder} bag created"
  fi

server=heisenberg.library.emory.edu
# server=brutus.library.emory.edu
port=2222

/usr/bin/expect - << EndMark
#
#exp_internal 1
#
# This Expect script was generated by autoexpect on Mon Dec 15 12:24:29 2014
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
#if {$force_conservative} {
#	set send_slow {1 .1}
#	proc send {ignore arg} {
#		sleep .1
#		exp_send -s -- $arg
#	}
#}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn sftp -P $port $uname@$server
match_max 100000
expect -exact "Password: "
send -- "$passwd\r"
expect "sftp> "
send -- "mkdir $folder\r"
expect "sftp> "
send -- "mkdir $folder/data\r"
expect "sftp> "
send -- "mput $folder/* $folder/\r"
expect "sftp> "
send -- "mput $folder/data/* $folder/data\r"
expect "sftp> "
send -- "quit\r"
expect eof

EndMark

done
 
passwd= # get rid of passwd
